package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right), ((Scanner)getScanner()).yytext());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
non terminal Program program;
non terminal List<GlobalDeclaration> globalDeclarationList;
non terminal GlobalDeclaration globalDeclaration;
non terminal ProcedureDeclaration procedureDeclaration;
non terminal List<Statement> statementList;
non terminal Statement statement;
non terminal Statement closedStatement;
non terminal Statement openStatement;
non terminal Statement simpleStatement;
non terminal CompoundStatement compoundStatement;
non terminal CallStatement callStatement;
non terminal List<Expression> argumentList;
non terminal AssignStatement assignStatement;
non terminal Expression expression;
non terminal Expression equalityExpression;
non terminal Expression relationalExpression;
non terminal Expression additiveExpression;
non terminal Expression term;
non terminal Expression factor;
non terminal Expression intLiteral;
non terminal UnaryExpression unaryExpression;
non terminal Variable variable;
non terminal NamedVariable namedVariable;
non terminal ArrayAccess arrayAccess;
non terminal List<VariableDeclaration> declarationList;
non terminal VariableDeclaration variableDeclaration;
non terminal List<ParameterDeclaration> parameterList;
non terminal ParameterDeclaration parameterDeclaration;
non terminal TypeDeclaration typeDeclaration;
non terminal TypeExpression typeExpression;
non terminal NamedTypeExpression namedTypeExpression;
non terminal ArrayTypeExpression arrayTypeExpression;
non terminal empty;

start with program;

program ::= globalDeclarationList:list {:RESULT = new Program(new Position(listleft, listright), list);:};

globalDeclarationList ::= globalDeclaration:head globalDeclarationList:tail {:RESULT=cons(head, tail);:}
                            | globalDeclaration:head {:RESULT=cons(head, nil());:};
globalDeclaration ::= procedureDeclaration:procedure {:RESULT = procedure;:}
                        | typeDeclaration:type {:RESULT = type;:};

procedureDeclaration ::= PROC:proc IDENT:name LPAREN parameterList:parameter RPAREN LCURL declarationList:variables statementList:body RCURL {:RESULT = new ProcedureDeclaration(new Position(procleft, procright), name, parameter, variables, body);:}
            | PROC:proc IDENT:name LPAREN RPAREN LCURL declarationList:variables statementList:body RCURL  {:RESULT = new ProcedureDeclaration(new Position(procleft, procright), name, nil(), variables, body);:};


statementList ::= statement:head statementList:tail {:RESULT = cons(head, tail);:}
                    | empty {:RESULT = nil();:};

// solve dangling else problem: https://en.wikipedia.org/wiki/Dangling_else
statement ::= openStatement:open {:RESULT = open;:}
                | closedStatement:closed {:RESULT = closed;:}
                | compoundStatement:compound {:RESULT = compound;:};

compoundStatement ::= LCURL statementList:list RCURL {:RESULT = new CompoundStatement(new Position(listleft, listright), list);:};

openStatement ::= IF LPAREN expression:condition RPAREN simpleStatement:body {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, new EmptyStatement(new Position(conditionleft, conditionright)));:}
                    | IF LPAREN expression:condition RPAREN compoundStatement:body {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, new EmptyStatement(new Position(conditionleft, conditionright)));:}
                    | IF LPAREN expression:condition RPAREN compoundStatement:body ELSE openStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | IF LPAREN expression:condition RPAREN openStatement:body {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, new EmptyStatement(new Position(conditionleft, conditionright)));:}
                    | IF LPAREN expression:condition RPAREN closedStatement:body ELSE openStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | WHILE LPAREN expression:condition RPAREN openStatement:body {:RESULT = new WhileStatement(new Position(conditionleft, conditionright), condition, body);:};

closedStatement ::= simpleStatement:statement {:RESULT = statement;:}
                    | IF LPAREN expression:condition RPAREN closedStatement:body ELSE closedStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | IF LPAREN expression:condition RPAREN closedStatement:body ELSE compoundStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | IF LPAREN expression:condition RPAREN compoundStatement:body ELSE closedStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | IF LPAREN expression:condition RPAREN compoundStatement:body ELSE compoundStatement:elseBody {:RESULT = new IfStatement(new Position(conditionleft, conditionright), condition, body, elseBody);:}
                    | WHILE LPAREN expression:condition RPAREN closedStatement:body {:RESULT = new WhileStatement(new Position(conditionleft, conditionright), condition, body);:}
                    | WHILE LPAREN expression:condition RPAREN compoundStatement:body {:RESULT = new WhileStatement(new Position(conditionleft, conditionright), condition, body);:};

simpleStatement ::= assignStatement:assign {:RESULT = assign;:}
                    | callStatement:call {:RESULT = call;:}
                    | SEMIC:semic {:RESULT = new EmptyStatement(new Position(semicleft, semicright));:};

assignStatement ::= variable:target ASGN:asgn expression:value SEMIC {:RESULT = new AssignStatement(new Position(asgnleft, asgnright), target, value);:};

callStatement ::= IDENT:name LPAREN argumentList:arguments RPAREN SEMIC {:RESULT = new CallStatement(new Position(nameleft, nameright), name, arguments);:}
            | IDENT:name LPAREN RPAREN SEMIC {:RESULT = new CallStatement(new Position(nameleft, nameright), name, nil());:};

argumentList ::= expression:head COMMA argumentList:tail {:RESULT= cons(head, tail);:}
                | expression:head {:RESULT= cons(head, nil());:};
expression ::= equalityExpression:expr {:RESULT = expr;:};

equalityExpression ::= relationalExpression:expr {:RESULT = expr;:}
                        | equalityExpression:lop EQ:op relationalExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.EQU, lop, rop);:}
                        | equalityExpression:lop NE:op relationalExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.NEQ, lop, rop);:};

relationalExpression ::= additiveExpression:expr {:RESULT = expr;:}
                        | relationalExpression:lop LT:op additiveExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LST, lop, rop);:}
                        | relationalExpression:lop LE:op additiveExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.LSE, lop, rop);:}
                        | relationalExpression:lop GT:op additiveExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRT, lop, rop);:}
                        | relationalExpression:lop GE:op additiveExpression:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.GRE, lop, rop);:};

additiveExpression ::= term:expr {:RESULT = expr;:}
                | additiveExpression:lop PLUS:op term:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.ADD, lop, rop);:}
                | additiveExpression:lop MINUS:op term:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, lop, rop);:};

term ::= factor:expr {:RESULT = expr;:}
        | term:lop STAR:op factor:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.MUL, lop, rop);:}
        | term:lop SLASH:op factor:rop {:RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.DIV, lop, rop);:};

factor ::= LPAREN expression:expr RPAREN {:RESULT = expr;:}
            | unaryExpression:expr {:RESULT = expr;:}
            | intLiteral:expr {:RESULT = expr;:}
            | variable:variable {:RESULT = new VariableExpression(new Position(variableleft, variableright), variable);:};

intLiteral ::= INTLIT:value {:RESULT = new IntLiteral(new Position(valueleft, valueright), value);:};

unaryExpression ::= MINUS:op factor:operand {:RESULT = new UnaryExpression(new Position(opleft, opright), UnaryExpression.Operator.MINUS, operand);:};

variable ::= namedVariable:named {:RESULT = named;:}
            | arrayAccess:array {:RESULT = array;:};

namedVariable ::= IDENT:name {:RESULT = new NamedVariable(new Position(nameleft, nameright), name);:};
arrayAccess ::= variable:array LBRACK expression:index RBRACK {:RESULT = new ArrayAccess(new Position(arrayleft, arrayright), array, index);:};

declarationList ::= variableDeclaration:head declarationList:tail {:RESULT = cons(head, tail);:}
                    | empty {:RESULT = nil();:};

variableDeclaration ::= VAR:var IDENT:name COLON typeExpression:typeExpr SEMIC {:RESULT = new VariableDeclaration(new Position(varleft, varright), name, typeExpr);:};

parameterList ::= parameterDeclaration:head COMMA parameterList:tail {:RESULT = cons(head, tail);:}
                    | parameterDeclaration:head {:RESULT = cons(head, nil());:};

parameterDeclaration ::= IDENT:name COLON typeExpression:typeExpr {:RESULT = new ParameterDeclaration(new Position(nameleft, nameright), name, typeExpr, false);:}
            | REF IDENT:name COLON typeExpression:typeExpr {:RESULT = new ParameterDeclaration(new Position(nameleft, nameright), name, typeExpr, true);:};

typeDeclaration ::= TYPE:type IDENT:name EQ typeExpression:expr SEMIC {:RESULT = new TypeDeclaration(new Position(typeleft, typeright), name, expr);:};

typeExpression ::= arrayTypeExpression:array {:RESULT = array;:}
        | namedTypeExpression:named {:RESULT = named;:};

namedTypeExpression ::= IDENT:name {:RESULT = new NamedTypeExpression(new Position(nameleft, nameright), name);:};
arrayTypeExpression ::= ARRAY:array LBRACK INTLIT:size RBRACK OF typeExpression:baseType {:RESULT = new ArrayTypeExpression(new Position(arrayleft, arrayright), size, baseType);:};

empty ::= ;